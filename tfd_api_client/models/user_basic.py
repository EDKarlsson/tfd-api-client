# coding: utf-8

"""
    The First Descendant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class UserBasic(BaseModel):
    """
    UserBasic
    """ # noqa: E501
    ouid: Optional[StrictStr] = Field(default=None, description="OUID")
    user_name: Optional[StrictStr] = Field(default=None, description="Nickname")
    platform_type: Optional[StrictStr] = Field(default=None, description="Platform type")
    mastery_rank_level: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Mastery Rank")
    mastery_rank_exp: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Mastery Rank EXP")
    title_prefix_id: Optional[StrictStr] = Field(default=None, description="Prefix title identifier (Refer to /meta/title API)")
    title_suffix_id: Optional[StrictStr] = Field(default=None, description="Suffix title identifier (Refer to /meta/title API)")
    os_language: Optional[StrictStr] = Field(default=None, description="OS language setting")
    game_language: Optional[StrictStr] = Field(default=None, description="Game language setting")
    medal_id: Optional[StrictStr] = Field(default=None, description="Medal identifier")
    medal_level: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Medal grade")
    __properties: ClassVar[List[str]] = ["ouid", "user_name", "platform_type", "mastery_rank_level", "mastery_rank_exp", "title_prefix_id", "title_suffix_id", "os_language", "game_language", "medal_id", "medal_level"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserBasic from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserBasic from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ouid": obj.get("ouid"),
            "user_name": obj.get("user_name"),
            "platform_type": obj.get("platform_type"),
            "mastery_rank_level": obj.get("mastery_rank_level"),
            "mastery_rank_exp": obj.get("mastery_rank_exp"),
            "title_prefix_id": obj.get("title_prefix_id"),
            "title_suffix_id": obj.get("title_suffix_id"),
            "os_language": obj.get("os_language"),
            "game_language": obj.get("game_language"),
            "medal_id": obj.get("medal_id"),
            "medal_level": obj.get("medal_level")
        })
        return _obj


