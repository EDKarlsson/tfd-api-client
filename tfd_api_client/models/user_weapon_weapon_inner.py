# coding: utf-8

"""
    The First Descendant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from tfd_api_client.models.user_descendant_module_inner import UserDescendantModuleInner
from tfd_api_client.models.user_weapon_weapon_inner_core_inner import UserWeaponWeaponInnerCoreInner
from tfd_api_client.models.user_weapon_weapon_inner_weapon_additional_stat_inner import UserWeaponWeaponInnerWeaponAdditionalStatInner
from typing import Optional, Set
from typing_extensions import Self

class UserWeaponWeaponInner(BaseModel):
    """
    UserWeaponWeaponInner
    """ # noqa: E501
    module_max_capacity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Max. equippable module capacity")
    module_capacity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Equipped capacity")
    energy_activator_use_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Energy activator usage count")
    weapon_slot_id: Optional[StrictStr] = Field(default=None, description="Weapon slot identifier")
    weapon_id: Optional[StrictStr] = Field(default=None, description="Weapon identifier (Refer to /meta/weapon API)")
    weapon_level: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Weapon level")
    perk_ability_enchant_level: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Weapon Unique Ability enchantment level")
    weapon_additional_stat: Optional[List[UserWeaponWeaponInnerWeaponAdditionalStatInner]] = Field(default=None, description="Weapon random option information")
    module: Optional[List[UserDescendantModuleInner]] = Field(default=None, description="Module information")
    core_unlock_flag: Optional[StrictStr] = Field(default=None, description="Core unlock status (0:Locked | 1:Unlocked)")
    core: Optional[List[UserWeaponWeaponInnerCoreInner]] = Field(default=None, description="Core option information")
    __properties: ClassVar[List[str]] = ["module_max_capacity", "module_capacity", "energy_activator_use_count", "weapon_slot_id", "weapon_id", "weapon_level", "perk_ability_enchant_level", "weapon_additional_stat", "module", "core_unlock_flag", "core"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserWeaponWeaponInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in weapon_additional_stat (list)
        _items = []
        if self.weapon_additional_stat:
            for _item_weapon_additional_stat in self.weapon_additional_stat:
                if _item_weapon_additional_stat:
                    _items.append(_item_weapon_additional_stat.to_dict())
            _dict['weapon_additional_stat'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in module (list)
        _items = []
        if self.module:
            for _item_module in self.module:
                if _item_module:
                    _items.append(_item_module.to_dict())
            _dict['module'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in core (list)
        _items = []
        if self.core:
            for _item_core in self.core:
                if _item_core:
                    _items.append(_item_core.to_dict())
            _dict['core'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserWeaponWeaponInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "module_max_capacity": obj.get("module_max_capacity"),
            "module_capacity": obj.get("module_capacity"),
            "energy_activator_use_count": obj.get("energy_activator_use_count"),
            "weapon_slot_id": obj.get("weapon_slot_id"),
            "weapon_id": obj.get("weapon_id"),
            "weapon_level": obj.get("weapon_level"),
            "perk_ability_enchant_level": obj.get("perk_ability_enchant_level"),
            "weapon_additional_stat": [UserWeaponWeaponInnerWeaponAdditionalStatInner.from_dict(_item) for _item in obj["weapon_additional_stat"]] if obj.get("weapon_additional_stat") is not None else None,
            "module": [UserDescendantModuleInner.from_dict(_item) for _item in obj["module"]] if obj.get("module") is not None else None,
            "core_unlock_flag": obj.get("core_unlock_flag"),
            "core": [UserWeaponWeaponInnerCoreInner.from_dict(_item) for _item in obj["core"]] if obj.get("core") is not None else None
        })
        return _obj


