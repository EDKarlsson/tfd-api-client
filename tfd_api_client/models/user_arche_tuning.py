# coding: utf-8

"""
    The First Descendant API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from tfd_api_client.models.user_arche_tuning_arche_tuning_inner import UserArcheTuningArcheTuningInner
from typing import Optional, Set
from typing_extensions import Self

class UserArcheTuning(BaseModel):
    """
    UserArcheTuning
    """ # noqa: E501
    ouid: Optional[StrictStr] = Field(default=None, description="Account identifier")
    descendant_group_id: Optional[StrictStr] = Field(default=None, description="Descendant group identifier (Refer to /meta/descendant-group API)")
    arche_tuning_board_group_id: Optional[StrictStr] = Field(default=None, description="Arche tuning board group identifier (Refer to /meta/arche-tuning-board-group API)")
    arche_tuning: Optional[List[UserArcheTuningArcheTuningInner]] = Field(default=None, description="Arche tuning list")
    __properties: ClassVar[List[str]] = ["ouid", "descendant_group_id", "arche_tuning_board_group_id", "arche_tuning"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserArcheTuning from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in arche_tuning (list)
        _items = []
        if self.arche_tuning:
            for _item_arche_tuning in self.arche_tuning:
                if _item_arche_tuning:
                    _items.append(_item_arche_tuning.to_dict())
            _dict['arche_tuning'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserArcheTuning from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ouid": obj.get("ouid"),
            "descendant_group_id": obj.get("descendant_group_id"),
            "arche_tuning_board_group_id": obj.get("arche_tuning_board_group_id"),
            "arche_tuning": [UserArcheTuningArcheTuningInner.from_dict(_item) for _item in obj["arche_tuning"]] if obj.get("arche_tuning") is not None else None
        })
        return _obj


